---
import type {ImageMetadata} from "astro";
import { Image } from 'astro:assets';

interface ImageInfo {
    src: string;
    alt: string;
    name: string;
    caption?: string;
}

interface Props {
    images: ImageInfo[];
}
const { images } = Astro.props;

const imageSources = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}')
for (const image of images) {
    if (!imageSources[image.src]) throw new Error(`"${image.src}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`);
}
---
<tr>
    <td colspan="2">
        {<div>
            <div class="flex flex-wrap gap-x-2 gap-y-2 not-content contain-content" role="tablist">
                {images.map((image, index) => (
                        <button
                                class="p-2 bg-transparent box-border border-b-4 border-transparent aria-selected:dark:border-blue-300 aria-selected:border-blue-600 hover:dark:border-white hover:border-black flex-auto aria-selected:font-bold"
                                aria-selected={index === 0}
                                aria-controls={`tab-${Astro.props.id}-${index}`}
                                role="tab"
                                tabindex={index === 0 ? 0 : -1}
                                id={`infobox_tab-${Astro.props.id}-${index}`}
                        >
                            {image.name}
                        </button>
                ))}
            </div>
            {images.map((image, index) => (
                    <div id={`tab-${Astro.props.id}-${index}`} role="tabpanel" hidden={index !== 0}>
                        <Image src={imageSources[image.src]()} alt={image.alt} />
                        {image.caption && <p>{image.caption}</p>}
                    </div>
            ))}
        </div>}
    </td>
</tr>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const containers: NodeListOf<Element> = document.querySelectorAll('[role="tablist"]');
        containers.forEach((tabContainer) => {
            // @ts-ignore
            const buttons: HTMLButtonElement[] = tabContainer.querySelectorAll('[role="tab"]');
            // @ts-ignore
            const panels: HTMLElement[] = tabContainer.parentElement?.querySelectorAll('[role="tabpanel"]');

            buttons.forEach((button, index) => {
                button.addEventListener('click', () => {
                    buttons.forEach((b, i) => {
                        b.setAttribute('aria-selected', i === index ? 'true' : 'false');
                        b.tabIndex = i === index ? 0 : -1;
                    });
                    panels.forEach((panel, i) => {
                        panel.hidden = i !== index;
                    });
                });
            });
        });
    });
</script>
